{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["MenuItem1","text","selectedKey","className","MenuItem2","selectedLabel","Menu1","list","map","el","prefName","prefCode","key","selected","Menu2","label","Arrow","ArrowLeft","ArrowRight","App","props","onSelect","name","fetch","method","headers","then","res","json","jdata","setState","prefPop","result","data","selectedName","CData","getPerLabelData","filter","elem","onSelectM2","state","prefList","menuItems1","menuItems2","this","menu1","menu2","tempData","id","arrowLeft","arrowRight","align","height","width","margin","top","right","left","bottom","x1","y1","x2","y2","offset","stopColor","stopOpacity","dataKey","value","position","strokeDasharray","type","stroke","fillOpacity","fill","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8cc6c302.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ScrollMenu from 'react-horizontal-scrolling-menu';\nimport './App.css';\n\nimport {\n  AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip\n} from 'recharts';\n\nconst MenuItem1 = ({text, selectedKey}) => {\n  return <div\n    className={`menu-item ${selectedKey ? 'active' : ''}`}\n    >{text}</div>;\n};\n\nconst MenuItem2 = ({text, selectedLabel}) => {\n  return <div\n    className={`menu-item ${selectedLabel ? 'active' : ''}`}\n    >{text}</div>;\n};\n\nexport const Menu1 = (list, selectedKey) =>\n  list.map(el => {\n    const {prefName, prefCode} = el;\n \n    return <MenuItem1 text={prefName} key={prefCode} selected={selectedKey} />;\n  });\n\nexport const Menu2 = (list, selectedLabel) =>\n  list.map(el => {\n    const {label} = el;\n \n    return <MenuItem2 text={label} key={label} selected={selectedLabel} />;\n  });\n\nconst Arrow = ({ text, className }) => {\n    return (\n      <div\n        className={className}\n      >{text}</div>\n    );\n  };\n\nconst ArrowLeft = Arrow({ text: '<', className: 'arrow-prev' });\nconst ArrowRight = Arrow({ text: '>', className: 'arrow-next' });\n\n//const selected = '北海道';\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      selectedName: '北海道',\n      selectedKey: 1,\n      prefList: [{prefCode: 1, prefName: \"北海道\"}],\n      selectedLabel: '',\n      prefPop: [],\n      CData: []\n    }\n\n    this.menuItems1 = Menu1(this.state.prefList, this.state.selectedKey);\n    this.menuItems2 = Menu2(this.state.prefPop, this.state.selectedLabel);\n  }\n\n  onSelect = (key, name) => {\n    fetch('https://opendata.resas-portal.go.jp/api/v1/population/composition/perYear?prefCode='+key, {\n      method: 'GET',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-API-KEY\": \"0TcDvnFjHBuHwOTpnMkYeE4c4KZVTTObEOedJxsg\"\n      }\n    }).then((res) => res.json()).then(jdata => {\n      this.setState({\n        prefPop: jdata.result.data,\n        selectedLabel: jdata.result.data[0].label,\n        selectedKey: key,\n        selectedName: name,\n        CData: this.getPerLabelData(jdata.result.data[0].label, jdata.result.data)\n      });\n    });\n  }\n\n  getPerLabelData = (key, list) => {\n    return list.filter((el) => el.label === key).map((elem) => {\n      const {data} = elem;\n      return data;\n    });\n  }\n\n  onSelectM2 = (key) => {\n    this.setState({\n      CData: this.getPerLabelData(key, this.state.prefPop),\n      selectedLabel: key\n    });\n  }\n\n  componentDidMount(){\n    fetch('https://opendata.resas-portal.go.jp/api/v1/prefectures', {\n      method: 'GET',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-API-KEY\": \"0TcDvnFjHBuHwOTpnMkYeE4c4KZVTTObEOedJxsg\"\n      }\n    }).then((res) => res.json()).then(data => {\n      this.setState({\n        prefList: data.result\n      });\n    });\n  }\n\n  /*\n\n  */\n\n  render() {\n    const { selectedKey, selectedLabel } = this.state;\n    // Create menu from items\n    const menu1 = Menu1(this.state.prefList, selectedKey);\n    const menu2 = Menu2(this.state.prefPop, selectedLabel);\n    const tempData = this.state.CData;\n    return (\n      <div className=\"App\">\n        <div id='myheader'>Population Composition Trends of Different Prefectures</div>\n        <ScrollMenu\n          data={menu1}\n          arrowLeft={ArrowLeft}\n          arrowRight={ArrowRight}\n          selected={selectedKey}\n          onSelect={this.onSelect}\n        />\n        <ScrollMenu\n          data={menu2}\n          arrowLeft={ArrowLeft}\n          arrowRight={ArrowRight}\n          selected={selectedLabel}\n          onSelect={this.onSelectM2}\n        />\n        \n        <div align=\"center\">\n        <AreaChart height={400} width={1000} data={tempData[0]}\n              margin={{ top: 30, right: 30, left: 30, bottom: 30 }}  >\n          <defs>\n            <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop offset=\"5%\" stopColor=\"#8884d8\" stopOpacity={0.8}/>\n              <stop offset=\"95%\" stopColor=\"#8884d8\" stopOpacity={0}/>\n            </linearGradient>\n          </defs>\n          <XAxis dataKey=\"year\" label={{value: 'Year', position: 'bottom'}}>\n          </XAxis>\n          <YAxis/>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <Tooltip />\n          <Area type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" fillOpacity={1} fill=\"url(#colorUv)\"/>\n    </AreaChart>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}